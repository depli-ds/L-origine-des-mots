import Foundation
import Combine

// Erreurs sp√©cifiques √† la curation
enum CurationError: LocalizedError {
    case rateLimited(waitTime: TimeInterval)
    case claudeOverloaded
    case noRecentWords
    
    var errorDescription: String? {
        switch self {
        case .rateLimited(let waitTime):
            return "Limitation de d√©bit: veuillez attendre \(Int(waitTime)) secondes"
        case .claudeOverloaded:
            return "Claude est temporairement surcharg√©, r√©essayez dans quelques minutes"
        case .noRecentWords:
            return "Aucun mot r√©cent √† analyser"
        }
    }
}

@MainActor
class RemarkableWordsCurator: ObservableObject {
    static let shared = RemarkableWordsCurator()
    
    // Publisher pour notifier les changements
    @Published var newWordsAdded: [RemarkableWord] = []
    
    // Limitation des requ√™tes pour √©viter l'overload de Claude
    private var lastCurationTime: Date?
    private let minimumCurationInterval: TimeInterval = 60 // 1 minute minimum entre 2 curations
    
    private init() {}
    
    // Prompt pour Claude pour analyser la remarquabilit√© des mots
    private let curationPrompt = """
    Tu es un expert en √©tymologie charg√© de s√©lectionner des mots remarquables pour une application √©ducative.

    Analyse cette liste de mots et leur √©tymologie, puis s√©lectionne uniquement les plus remarquables selon ces crit√®res :

    CRIT√àRES DE REMARQUABILIT√â :
    - Voyage g√©ographique fascinant (plusieurs continents, routes commerciales historiques)
    - √âvolution s√©mantique surprenante (changement de sens radical)
    - Passage par des langues anciennes ou "exotiques" (sanskrit, arabe, nahuatl, etc.)
    - Histoire culturelle int√©ressante (emprunts li√©s √† des √©v√©nements historiques)
    - Anecdotes √©tymologiques captivantes

    √âVITER :
    - √âtymologies simples ou directes (fran√ßais ‚Üí latin ‚Üí grec)
    - Mots trop techniques ou sp√©cialis√©s
    - √âvolutions trop pr√©visibles

    Pour chaque mot s√©lectionn√©, fournis :
    1. Le mot
    2. Une description courte et engageante (max 80 caract√®res)
    3. 2-3 tags pertinents parmi : alimentation, arabe, grec, latin, sanskrit, perse, chinois, nahuatl, turc, sciences, v√™tements, objets, histoire, jeux, math√©matiques, m√©decine, marine, religion, technique

    Format de r√©ponse JSON :
    {
      "selected_words": [
        {
          "word": "mot",
          "description": "Description courte et captivante",
          "tags": ["tag1", "tag2"]
        }
      ]
    }

    S√©lectionne maximum 5 mots les plus remarquables de la liste.

    MOTS √Ä ANALYSER :
    """
    
    // Analyse des mots r√©cents pour curation
    func analyzeRecentWordsForCuration(since date: Date = Calendar.current.date(byAdding: .day, value: -7, to: Date()) ?? Date()) async throws -> [RemarkableWord] {
        print("üîç Analyse des mots r√©cents pour curation...")
        print("üìÖ Cette fonctionnalit√© est temporairement d√©sactiv√©e")
        
        // TODO: Impl√©menter une nouvelle m√©thode pour r√©cup√©rer les mots r√©cents
        throw CurationError.noRecentWords
    }
    
    // Curation compl√®te : analyse + ajout en base
    func performFullCuration() async throws -> Int {
        print("üéØ D√©marrage de la curation compl√®te...")
        print("‚ÑπÔ∏è Fonctionnalit√© de curation automatique temporairement d√©sactiv√©e")
        print("üí° Utilisez l'ajout manuel de mots remarquables")
        
        // V√©rifier si assez de temps s'est √©coul√© depuis la derni√®re curation
        if let lastTime = lastCurationTime {
            let timeSinceLastCuration = Date().timeIntervalSince(lastTime)
            if timeSinceLastCuration < minimumCurationInterval {
                let waitTime = minimumCurationInterval - timeSinceLastCuration
                print("‚è±Ô∏è Limitation de d√©bit : derni√®re curation il y a \(Int(timeSinceLastCuration))s")
                print("‚è≥ Veuillez attendre encore \(Int(waitTime))s avant la prochaine curation")
                throw CurationError.rateLimited(waitTime: waitTime)
            }
        }
        
        // Marquer le temps m√™me si aucune curation effectu√©e
        lastCurationTime = Date()
        
        print("‚ö†Ô∏è Aucune curation automatique effectu√©e - fonctionnalit√© d√©sactiv√©e")
        return 0
    }
    
    // Vider le cache de notification
    func clearNewWordsNotification() {
        newWordsAdded = []
    }
    
    // R√©g√©n√©rer une s√©lection al√©atoire intelligente
    func generateRandomSelection(from allWords: [RemarkableWord], count: Int = 20) -> [RemarkableWord] {
        // Grouper par tags pour avoir de la diversit√©
        let tagGroups = Dictionary(grouping: allWords) { word in
            word.tags.first ?? "divers"
        }
        
        var selectedWords: [RemarkableWord] = []
        var remainingCount = count
        
        // Prendre au moins un mot de chaque cat√©gorie repr√©sent√©e
        for (_, words) in tagGroups.shuffled() {
            if remainingCount <= 0 { break }
            if let word = words.randomElement() {
                selectedWords.append(word)
                remainingCount -= 1
            }
        }
        
        // Compl√©ter avec des mots al√©atoires s'il en manque
        let selectedWordIds = Set(selectedWords.map { $0.id })
        let remainingWords = allWords.filter { !selectedWordIds.contains($0.id) }
        selectedWords.append(contentsOf: remainingWords.shuffled().prefix(remainingCount))
        
        return Array(selectedWords.shuffled().prefix(count))
    }
} 