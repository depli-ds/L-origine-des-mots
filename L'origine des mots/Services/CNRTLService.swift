import Foundation

enum CNRTLError: Error {
    case invalidURL
    case networkError
    case serviceUnavailable
    case wordNotFound
    case sectionNotFound
    case maxRedirectsReached
}

class CNRTLService {
    static let shared = CNRTLService()
    private let maxRedirects = 3
    
    private init() {}
    
    func fetchEtymology(for word: String) async throws -> (String, SourceState) {
        let url = URL(string: "https://www.cnrtl.fr/etymologie/\(word)")!
        print("\nüìö V√©rification CNRTL pour '\(word)'")
        print("üìç URL:", url.absoluteString)
        
        let session = createSession()
        defer { session.invalidateAndCancel() }
        
        var request = URLRequest(url: url)
        request.setValue("Mozilla/5.0", forHTTPHeaderField: "User-Agent")
        
        let (data, response) = try await session.data(for: request)
        guard let httpResponse = response as? HTTPURLResponse else {
            throw CNRTLError.networkError
        }
        
        print("üì• Code HTTP:", httpResponse.statusCode)
        
        if httpResponse.statusCode == 200,
           let html = String(data: data, encoding: .utf8),
           !html.contains("Cette forme est introuvable") {
            print("‚úÖ Page CNRTL trouv√©e")
            return (url.absoluteString, .foundInCNRTL)
        }
        
        print("‚ùå Page non trouv√©e")
        throw CNRTLError.wordNotFound
    }
    
    func fetchEtymologyText(from url: String) async throws -> String {
        return try await fetchEtymologyTextWithRedirects(from: url, redirectCount: 0)
    }
    
    private func fetchEtymologyTextWithRedirects(from url: String, redirectCount: Int) async throws -> String {
        // Protection contre les boucles infinies
        guard redirectCount < 3 else {
            print("‚ùå Trop de redirections CNRTL (max 3)")
            throw CNRTLError.maxRedirectsReached
        }
        
        let url = URL(string: url)!
        let session = createSession()
        defer { session.invalidateAndCancel() }
        
        var request = URLRequest(url: url)
        request.setValue("Mozilla/5.0", forHTTPHeaderField: "User-Agent")
        
        let (data, _) = try await session.data(for: request)
        guard let html = String(data: data, encoding: .utf8) else {
            throw CNRTLError.networkError
        }
        
        
        // NOUVELLE APPROCHE : Extraction bas√©e sur la structure HTML fixe de CNRTL
        print("üèóÔ∏è Extraction bas√©e sur la structure HTML fixe (div#contentbox)")
        
        // 1. V√©rifier d'abord si le mot n'existe pas
        let quickCheck = html.replacingOccurrences(of: "<[^>]+>", with: " ", options: .regularExpression)
        if quickCheck.contains("Cette forme est introuvable") || quickCheck.contains("introuvable") {
            print("‚ùå Mot introuvable sur CNRTL")
            throw CNRTLError.sectionNotFound
        }
        
        // 2. Extraction cibl√©e avec la structure HTML fixe : <div id="contentbox">...</div>
        if let contentboxStart = html.range(of: "<div id=\"contentbox\">"),
           let contentboxEnd = html.range(of: "</div></td></tr></table></div>", range: contentboxStart.upperBound..<html.endIndex) {
            
            let contentboxSection = String(html[contentboxStart.upperBound..<contentboxEnd.lowerBound])
            let cleanedEtymology = contentboxSection
                .replacingOccurrences(of: "<[^>]+>", with: " ", options: .regularExpression)
                .replacingOccurrences(of: "\\s+", with: " ", options: .regularExpression)
                .trimmingCharacters(in: .whitespacesAndNewlines)
            
            if cleanedEtymology.count >= 100 {
                print("üéØ Section √©tymologique extraite via structure HTML (\(cleanedEtymology.count) caract√®res)")
                print("üìù Aper√ßu: \(String(cleanedEtymology.prefix(150)))...")
                
                // V√©rification pour les redirections EXPLICITES uniquement (pas dans le contenu √©tymologique)
                // Ne faire une redirection que si c'est un contenu court avec une vraie instruction de redirection
                if cleanedEtymology.count < 300 && (cleanedEtymology.contains("Voir aussi ") ||
                   cleanedEtymology.hasPrefix("Voir ") || cleanedEtymology.hasPrefix("V. ")) {
                    if let redirectReference = detectCNRTLReference(in: cleanedEtymology) {
                        print("üîÑ R√©f√©rence de redirection d√©tect√©e vers: \(redirectReference)")
                        let newUrl = "https://www.cnrtl.fr/etymologie/\(redirectReference)"
                        return try await fetchEtymologyTextWithRedirects(from: newUrl, redirectCount: redirectCount + 1)
                    }
                }
                
                print("‚úÖ Contenu √©tymologique riche conserv√© (pas de redirection)")                
                return cleanedEtymology
            }
        }
        
        print("‚ö†Ô∏è Extraction structurelle √©chou√©e, fallback vers nettoyage complet")
        
        // 3. Fallback vers l'approche pr√©c√©dente (au cas o√π la structure change)
        let cleanedText = html
            .replacingOccurrences(of: "<script[^>]*>.*?</script>", with: "", options: [.regularExpression, .caseInsensitive])
            .replacingOccurrences(of: "<style[^>]*>.*?</style>", with: "", options: [.regularExpression, .caseInsensitive])
            .replacingOccurrences(of: "<[^>]+>", with: " ", options: .regularExpression)
            .replacingOccurrences(of: "\\s+", with: " ", options: .regularExpression)
            .trimmingCharacters(in: .whitespacesAndNewlines)
        
        print("üìÑ Contenu complet nettoy√© (\(cleanedText.count) caract√®res) - Claude analysera tout")
        // V√©rification minimale pour les redirections
        if cleanedText.count < 500 || cleanedText.contains("Voir ") || cleanedText.contains("V. ") {
            if let redirectReference = detectCNRTLReference(in: cleanedText) {
                print("üîÑ R√©f√©rence d√©tect√©e vers: \(redirectReference)")
                let newUrl = "https://www.cnrtl.fr/etymologie/\(redirectReference)"
                return try await fetchEtymologyTextWithRedirects(from: newUrl, redirectCount: redirectCount + 1)
            }
        }
        
        if cleanedText.count < 100 {
            print("‚ùå Page CNRTL trop courte ou vide")
            throw CNRTLError.sectionNotFound
        }
        
        return cleanedText
    }
    
    // D√©tecter les r√©f√©rences vers d'autres entr√©es CNRTL
    private func detectCNRTLReference(in text: String) -> String? {
        // Patterns pour d√©tecter les r√©f√©rences
        let referencePatterns = [
            "Voir\\s+([a-zA-Z√Ä-√ø0-9]+)", // "Voir cravate2"
            "V\\.\\s+([a-zA-Z√Ä-√ø0-9]+)", // "V. cravate2"
            "Cf\\.\\s+([a-zA-Z√Ä-√ø0-9]+)", // "Cf. cravate2"
            "([a-zA-Z√Ä-√ø]+\\d+)" // D√©tecter directement "cravate2"
        ]
        
        for pattern in referencePatterns {
            if let range = text.range(of: pattern, options: [.regularExpression, .caseInsensitive]) {
                let match = String(text[range])
                
                // Extraire le mot de r√©f√©rence
                if let regex = try? NSRegularExpression(pattern: pattern, options: .caseInsensitive) {
                    let nsText = text as NSString
                    let results = regex.matches(in: text, range: NSRange(location: 0, length: nsText.length))
                    
                    if let result = results.first, result.numberOfRanges > 1 {
                        let referenceRange = result.range(at: 1)
                        if referenceRange.location != NSNotFound {
                            let reference = nsText.substring(with: referenceRange)
                            print("üéØ R√©f√©rence extraite: '\(reference)' du pattern '\(pattern)'")
                            return reference
                        }
                    }
                }
                
                print("üéØ R√©f√©rence brute trouv√©e: '\(match)'")
                return match.components(separatedBy: .whitespaces).last
            }
        }
        
        return nil
    }
    
    // M√©thode simplifi√©e - SUPPRIM√âE : maintenant Claude analyse tout
    private func tryAlternativeExtractionMethods_DEPRECATED(from html: String) -> String? {
        print("üîß Tentatives d'extraction alternatives...")
        
        // M√©thode 1: Chercher d'autres patterns d'√©tymologie
        let alternativePatterns = [
            "[√âE]tym\\. et Hist\\.", // Etym. et Hist. - pattern exact pour hamac (priorit√©)
            "[√âE]TYMOL\\. ET HIST\\.", // √âTYMOL. ET HIST. en majuscules
            "[√âE]tym\\. et Hist\\.", // Etym. et Hist. - pattern exact pour hamac (priorit√©)
            "\\*\\*[√âE]tymol\\. et Hist\\.\\*\\*", // **√âtymol. et Hist.** pour robot
            "[√âE]tym\\.", // "Etym." au lieu de "√âTYMOL."
            "Origine", // Section "Origine"
            "Histoire du mot", // Section "Histoire du mot"
            "√âtymologie" // Section "√âtymologie" explicite
        ]
        
        for pattern in alternativePatterns {
            if let start = html.range(of: pattern, options: [.regularExpression, .caseInsensitive]) {
                print("üéØ Pattern alternatif trouv√©: \(pattern)")
                
                // Pour le pattern sp√©cifique de robot, chercher jusqu'au prochain pattern de fin
                let searchRange = start.upperBound..<html.endIndex
                let endPatterns = [
                    "</td>", // Fin de cellule de tableau
                    "<div", "<p", "<h", 
                    "HIST\\.", "SYNT\\.", "REM\\.",
                    "\\*\\*[A-Z]+\\*\\*", // Autre section en gras
                    "¬©.*?CNRTL" // Copyright
                ]
                
                var closestEnd: String.Index = html.endIndex
                for endPattern in endPatterns {
                    if let endRange = html.range(of: endPattern, options: [.regularExpression, .caseInsensitive], range: searchRange) {
                        if endRange.lowerBound < closestEnd {
                            closestEnd = endRange.lowerBound
                        }
                    }
                }
                
                let etymologyText = String(html[start.lowerBound..<closestEnd])
                    .replacingOccurrences(of: "<[^>]+>", with: " ", options: .regularExpression) // Remplacer par espace, pas vide
                    .replacingOccurrences(of: "\\*\\*", with: "", options: .regularExpression) // Enlever les balises gras markdown
                    .replacingOccurrences(of: "\\s+", with: " ", options: .regularExpression)
                    .trimmingCharacters(in: .whitespacesAndNewlines)
                
                if etymologyText.count >= 50 { // Seuil adapt√© pour les textes riches
                    print("‚úÖ Extraction alternative r√©ussie (\(etymologyText.count) caract√®res)")
                    print("üìù Aper√ßu: \(String(etymologyText.prefix(100)))...")
            return etymologyText
                }
            }
        }
        
        // M√©thode 2: Chercher dans le contenu g√©n√©ral de la page
        if let bodyMatch = extractFromGeneralContent(html) {
            return bodyMatch
        }
        
        // M√©thode 3: Extraction sp√©cifique pour les tableaux CNRTL
        if let tableContent = extractFromCNRTLTable(html) {
            return tableContent
        }
        
        print("‚ùå Toutes les m√©thodes d'extraction alternatives ont √©chou√©")
        return nil
    }
    
    // Nouvelle m√©thode pour extraire depuis les tableaux CNRTL
    private func extractFromCNRTLTable(_ html: String) -> String? {
        print("üîç Extraction depuis tableau CNRTL...")
        
        // Chercher le contenu dans les cellules de tableau qui contiennent de l'√©tymologie
        if let tableMatch = html.range(of: "<td[^>]*>.*?[√âE]tym.*?</td>", options: [.regularExpression, .caseInsensitive, ]) {
            let tableContent = String(html[tableMatch])
                .replacingOccurrences(of: "<[^>]+>", with: " ", options: .regularExpression)
                .replacingOccurrences(of: "\\*\\*", with: "", options: .regularExpression)
                .replacingOccurrences(of: "\\s+", with: " ", options: .regularExpression)
                .trimmingCharacters(in: .whitespacesAndNewlines)
            
            if tableContent.count >= 50 {
                print("‚úÖ Extraction depuis tableau r√©ussie (\(tableContent.count) caract√®res)")
                return tableContent
            }
        }
        
        return nil
    }
    
    private func extractFromGeneralContent(_ html: String) -> String? {
        print("üîç Extraction depuis le contenu g√©n√©ral de la page...")
        
        // Nettoyer le HTML et chercher des patterns √©tymologiques
        let cleanedContent = html
            .replacingOccurrences(of: "<[^>]+>", with: " ", options: .regularExpression)
            .replacingOccurrences(of: "\\s+", with: " ", options: .regularExpression)
        
        // Patterns pour identifier du contenu √©tymologique dans le texte g√©n√©ral
        let etymologyIndicators = [
            "emprunt√©.*?√†",
            "du.*?latin",
            "du.*?grec", 
            "de l'.*?arabe",
            "du.*?fran√ßais",
            "issu.*?de",
            "tir√©.*?de",
            "attest√©.*?en",
            "premi√®re.*?attestation",
            "Mot.*?tch√®que", // Sp√©cifique pour robot
            "form√©.*?sur" // Autre pattern pour robot
        ]
        
        for indicator in etymologyIndicators {
            if let range = cleanedContent.range(of: indicator, options: [.regularExpression, .caseInsensitive]) {
                print("üéØ Indicateur √©tymologique trouv√©: \(indicator)")
                
                // Extraire une phrase ou deux autour de cet indicateur
                let start = max(cleanedContent.startIndex, cleanedContent.index(range.lowerBound, offsetBy: -50, limitedBy: cleanedContent.startIndex) ?? range.lowerBound)
                let end = min(cleanedContent.endIndex, cleanedContent.index(range.upperBound, offsetBy: 200, limitedBy: cleanedContent.endIndex) ?? range.upperBound)
                
                let extractedText = String(cleanedContent[start..<end])
                    .trimmingCharacters(in: .whitespacesAndNewlines)
                
                if extractedText.count >= 30 {
                    print("‚úÖ Contenu √©tymologique extrait (\(extractedText.count) caract√®res)")
                    return extractedText
                }
            }
        }
        
        return nil
    }
    
    private func createSession() -> URLSession {
        let config = URLSessionConfiguration.ephemeral
        config.timeoutIntervalForRequest = 30
        config.waitsForConnectivity = true
        return URLSession(configuration: config)
    }
 // MARK: - D√©tection des mots compos√©s

/// D√©tecte si un texte √©tymologique indique un mot compos√© et extrait les composants
func detectComposedWord(in etymologyText: String) -> [String]? {
    print("üîç Analyse du texte pour d√©tecter un mot compos√©...")
    print("üìù Texte analys√©: \(String(etymologyText.prefix(200)))...")
    
    // Patterns pour d√©tecter les mots compos√©s dans le CNRTL
    let composedPatterns = [
        // Pattern principal: "Compos√© de l'√©l√©ment pr√©f. auto-1* et de mobile*"
        "Compos√© de l'√©l√©ment pr√©f\\. ([a-zA-Z√Ä-√ø-]+).*?et de ([a-zA-Z√Ä-√ø-]+)",
        // "Compos√© de auto et mobile"
        "Compos√© de ([a-zA-Z√Ä-√ø-]+) et (?:de )?([a-zA-Z√Ä-√ø-]+)",
        // "form√© de X et Y"
        "form√© de ([a-zA-Z√Ä-√ø-]+) et (?:de )?([a-zA-Z√Ä-√ø-]+)",
        // "D√©riv√© de X et Y"
        "D√©riv√© de ([a-zA-Z√Ä-√ø-]+) et (?:de )?([a-zA-Z√Ä-√ø-]+)",
        // "de X + Y"
        "de ([a-zA-Z√Ä-√ø-]+) \\+ ([a-zA-Z√Ä-√ø-]+)",
        // "pr√©f. auto- et mobile"
        "pr√©f\\. ([a-zA-Z√Ä-√ø-]+) et ([a-zA-Z√Ä-√ø-]+)"
    ]
    
    for pattern in composedPatterns {
        if let regex = try? NSRegularExpression(pattern: pattern, options: [.caseInsensitive]) {
            let nsText = etymologyText as NSString
            let results = regex.matches(in: etymologyText, range: NSRange(location: 0, length: nsText.length))
            
            if let result = results.first, result.numberOfRanges >= 3 {
                let component1Range = result.range(at: 1)
                let component2Range = result.range(at: 2)
                
                if component1Range.location != NSNotFound && component2Range.location != NSNotFound {
                    let component1 = nsText.substring(with: component1Range)
                        .replacingOccurrences(of: "-[0-9*]*", with: "", options: .regularExpression)
                        .replacingOccurrences(of: "\\*", with: "", options: .regularExpression)
                        .trimmingCharacters(in: .whitespacesAndNewlines)
                    
                    let component2 = nsText.substring(with: component2Range)
                        .replacingOccurrences(of: "-[0-9*]*", with: "", options: .regularExpression)
                        .replacingOccurrences(of: "\\*", with: "", options: .regularExpression)
                        .trimmingCharacters(in: .whitespacesAndNewlines)
                    
                    // Validation des composants
                    if component1.count >= 2 && component2.count >= 2 &&
                       component1.allSatisfy({ $0.isLetter || $0 == "-" }) &&
                       component2.allSatisfy({ $0.isLetter || $0 == "-" }) {
                        
                        print("‚úÖ Mot compos√© d√©tect√©!")
                        print("üß© Composant 1: '\(component1)'")
                        print("üß© Composant 2: '\(component2)'")
                        print("üéØ Pattern utilis√©: \(pattern)")
                        
                        return [component1, component2]
                    }
                }
            }
        }
    }
    
    print("‚ö†Ô∏è Aucun mot compos√© d√©tect√©")
    return nil
} }
