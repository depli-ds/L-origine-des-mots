import Foundation

/// Erreurs sp√©cifiques √† l'orchestration √©tymologique
enum EtymologyError: Error, LocalizedError {
    case insufficientEtymology(String)
    case analysisError(String)
    case networkError(String)
    
    var errorDescription: String? {
        switch self {
        case .insufficientEtymology(let message):
            return "√âtymologie insuffisante: \(message)"
        case .analysisError(let message):
            return "Erreur d'analyse: \(message)"
        case .networkError(let message):
            return "Erreur r√©seau: \(message)"
        }
    }
}

/// Service orchestrateur qui g√®re le flux complet d'analyse √©tymologique pour les nouveaux mots
class EtymologyOrchestrator {
    static let shared = EtymologyOrchestrator()
    
    private lazy var cnrtlService = CNRTLService.shared
    private lazy var textPreprocessor = TextPreprocessor(knownLanguages: [])
    
    private init() {}
    
    /// Orchestration compl√®te : recherche + analyse + sauvegarde
    func processNewWord(_ word: String) async throws -> Word {
        print("\nüéØ D√©marrage de l'orchestration pour le mot '\(word)'")
        
        // 1. V√©rification CNRTL
        print("üìö √âtape 1: V√©rification CNRTL...")
        let (cnrtlURL, sourceState) = try await cnrtlService.fetchEtymology(for: word)
        
        // 2. Extraction du texte √©tymologique
        print("üìù √âtape 2: Extraction du texte √©tymologique...")
        
        let etymologyText: String
        do {
            etymologyText = try await cnrtlService.fetchEtymologyText(from: cnrtlURL)
            print("‚úÖ Texte extrait (\(etymologyText.count) caract√®res)")
        } catch CNRTLError.maxRedirectsReached {
            // Cas sp√©cial pour les mots avec des r√©f√©rences circulaires (comme "rouge")
            print("‚ö†Ô∏è R√©f√©rences circulaires d√©tect√©es - tentative d'extraction directe...")
            
            // Au lieu de rejeter, essayons d'extraire le contenu directement
            do {
                etymologyText = try await extractEtymologyDirectly(from: cnrtlURL)
                print("‚úÖ Extraction directe r√©ussie (\(etymologyText.count) caract√®res)")
            } catch {
                print("‚ùå √âchec de l'extraction directe: \(error)")
                throw EtymologyError.networkError("Le mot '\(word)' contient des r√©f√©rences circulaires sur CNRTL et l'extraction directe a √©chou√©.")
            }
        } catch CNRTLError.sectionNotFound {
            // Cas sp√©cial pour les mots avec des sections d'√©tymologie non standard ou fausses r√©f√©rences (comme "robot")
            print("‚ö†Ô∏è Section √©tymologique non trouv√©e par le service standard - tentative d'extraction directe...")
            
            do {
                etymologyText = try await extractEtymologyDirectly(from: cnrtlURL)
                print("‚úÖ Extraction directe r√©ussie (\(etymologyText.count) caract√®res)")
            } catch {
                print("‚ùå √âchec de l'extraction directe: \(error)")
                throw EtymologyError.networkError("Le mot '\(word)' n'a pas pu √™tre extrait depuis CNRTL malgr√© les tentatives d'extraction directe.")
            }
        }
        
        // 3. R√©cup√©ration des langues connues
        print("üóÇÔ∏è √âtape 3: R√©cup√©ration des langues connues...")
        let knownLanguages = try await SupabaseService.shared.fetchLanguageNames()
        print("‚úÖ \(knownLanguages.count) langues connues charg√©es")
        
        // 4. Analyse avec Claude (service principal)
        print("ü§ñ √âtape 4: Analyse avec Claude...")
        let etymologyAnalysis = try await ClaudeService.shared.analyzeEtymology(etymologyText, knownLanguages: knownLanguages)
        print("‚úÖ Analyse Claude termin√©e - \(etymologyAnalysis.etymology.chain.count) √©tapes √©tymologiques")
        
        // 5. Validation : Identifier les mots avec des √©tymologies trop simples (sans rejeter)
        var hasMinimumEtymology = true
        var hasGeographicalOrigin = true
        
        if etymologyAnalysis.etymology.chain.count < 2 {
            print("‚ö†Ô∏è Mot '\(word)' avec √©tymologie courte (\(etymologyAnalysis.etymology.chain.count) √©tape(s))")
            print("   D√©tail: \(etymologyAnalysis.etymology.chain.map { $0.sourceWord }.joined(separator: " -> "))")
            hasMinimumEtymology = false
            // Mais on ne rejette plus - on sauvegarde quand m√™me
        }
        
        // Validation additionnelle : V√©rifier s'il y a au moins une v√©ritable origine g√©ographique
        let geographicalSteps = etymologyAnalysis.etymology.chain.filter { step in
            !step.language.lowercased().contains("dater") && 
            !step.language.lowercased().contains("date") &&
            step.language.lowercased() != "fran√ßais"
        }
        
        if geographicalSteps.count < 1 {
            print("‚ö†Ô∏è Mot '\(word)' sans origine g√©ographique claire")
            print("   √âtapes analys√©es: \(etymologyAnalysis.etymology.chain.map { "\($0.sourceWord) (\($0.language))" }.joined(separator: " -> "))")
            hasGeographicalOrigin = false
            // Mais on ne rejette plus - on sauvegarde quand m√™me
        } else {
            print("‚úÖ Validation r√©ussie : \(geographicalSteps.count) √©tape(s) g√©ographique(s) valide(s)")
        }
        
        // 6. Gestion des nouvelles langues si n√©cessaire
        if !etymologyAnalysis.new_languages.isEmpty {
            print("üåç √âtape 5: Traitement de \(etymologyAnalysis.new_languages.count) nouvelles langues...")
            await processNewLanguages(etymologyAnalysis.new_languages)
            
            // Attendre un peu pour la r√©plication Supabase et forcer le rechargement du cache
            print("‚è±Ô∏è Attente de la r√©plication des nouvelles langues...")
            try await Task.sleep(nanoseconds: 1_000_000_000) // 1 seconde
            
            // Forcer le rechargement du cache des langues pour inclure Ta√Øno
            await SupabaseService.shared.preloadLanguageLocations()
            print("‚úÖ Cache des langues recharg√© avec les nouvelles langues")
        }
        
        // 7. Cr√©ation de l'objet Word
        print("üì¶ √âtape 6: Cr√©ation de l'objet Word...")
        let newWord = Word(
            id: UUID().uuidString,
            word: word.lowercased().trimmingCharacters(in: .whitespaces),
            etymology: DirectEtymology(chain: etymologyAnalysis.etymology.chain),
            language: "fran√ßais",
            source: "CNRTL + Claude",
            createdAt: Date(),
            updatedAt: Date(),
            foundInCNRTL: sourceState == .foundInCNRTL,
            foundWithCNRTLAndClaude: true,
            isRemarkable: false,
            // Marquer sp√©cifiquement les mots sans d√©placement avec un indicateur sp√©cial
            shortDescription: (!hasMinimumEtymology || !hasGeographicalOrigin) ? "0" : nil, // Distance nulle si pas de d√©placement
            distanceKm: nil,  // Sera calcul√© lors de la sauvegarde
            isComposedWord: etymologyAnalysis.is_composed_word ?? false,
            components: etymologyAnalysis.components ?? [],
            gptAnalysis: etymologyAnalysis
        )
        
        // 8. Sauvegarde avec calcul automatique de distance
        print("üíæ √âtape 7: Sauvegarde avec calcul de distance...")
        let distance = try await SupabaseService.shared.saveWordWithDistance(newWord)
        print("üéâ Mot '\(word)' ajout√© avec succ√®s ! Distance: \(String(format: "%.1f", distance)) km")
        
        // ‚úÖ CORRECTION: Retourner un Word avec la distance mise √† jour
        let wordWithDistance = Word(
            id: newWord.id,
            word: newWord.word,
            etymology: newWord.etymology,
            language: newWord.language,
            source: newWord.source,
            createdAt: newWord.createdAt,
            updatedAt: newWord.updatedAt,
            foundInCNRTL: newWord.foundInCNRTL,
            foundWithCNRTLAndClaude: newWord.foundWithCNRTLAndClaude,
            isRemarkable: newWord.isRemarkable,
            shortDescription: newWord.shortDescription,
            distanceKm: distance,  // ‚úÖ Mettre √† jour avec la distance calcul√©e
            isComposedWord: newWord.isComposedWord,
            components: newWord.components,
            gptAnalysis: newWord.gptAnalysis
        )
        
        return wordWithDistance
    }
    
    /// Traitement des nouvelles langues identifi√©es avec sauvegarde en base
    private func processNewLanguages(_ newLanguages: [NewLanguage]) async {
        for language in newLanguages {
            print("üåç Nouvelle langue d√©tect√©e: \(language.name)")
            print("   üìç Localisation: \(language.description) (\(language.latitude), \(language.longitude))")
            print("   üìÖ P√©riode: \(language.period_start) - \(language.period_end)")
            print("   üí° Raison: \(language.reason)")
            
            // ‚úÖ Sauvegarder la nouvelle langue en base
            do {
                try await SupabaseService.shared.saveLanguageLocation(language)
            } catch {
                print("‚ùå Erreur lors de la sauvegarde de la langue '\(language.name)': \(error)")
                // On continue avec les autres langues m√™me si une √©choue
            }
        }
    }    
    /// Extrait l'√©tymologie directement d'une page CNRTL sans suivre les r√©f√©rences
    private func extractEtymologyDirectly(from urlString: String) async throws -> String {
        print("üîß Extraction directe d'√©tymologie depuis: \(urlString)")
        
        guard let url = URL(string: urlString) else {
            throw EtymologyError.networkError("URL invalide: \(urlString)")
        }
        
        let session = URLSession.shared
        var request = URLRequest(url: url)
        request.setValue("Mozilla/5.0", forHTTPHeaderField: "User-Agent")
        
        let (data, _) = try await session.data(for: request)
        guard let html = String(data: data, encoding: .utf8) else {
            throw EtymologyError.networkError("Impossible de d√©coder la page HTML")
        }
        
        // Patterns d'√©tymologie √©tendus pour couvrir diff√©rents formats
        let etymologyPatterns = [
            "[√âE]TYMOL\\.", // Pattern standard
            "\\*\\*[√âE]tymol\\. et Hist\\.\\*\\*", // **√âtymol. et Hist.** pour robot
            "[√âE]TYMOL\\. ET HIST\\.", // √âTYMOL. ET HIST. en majuscules
            "[√âE]tym\\. et Hist\\.", // Etym. et Hist.
            "[√âE]tym\\." // "Etym." au lieu de "√âTYMOL."
        ]
        
        for pattern in etymologyPatterns {
            if let start = html.range(of: pattern, options: [.regularExpression, .caseInsensitive]) {
                print("üéØ Pattern d'√©tymologie trouv√©: \(pattern)")
                
                // Chercher la fin de la section
                let searchRange = start.upperBound..<html.endIndex
                let endPatterns = [
                    "</td>", // Fin de cellule de tableau
                    "<div", "<p>", "<h[1-6]", 
                    "HIST\\.", "SYNT\\.", "REM\\.",
                    "\\*\\*[A-Z]+\\*\\*", // Autre section en gras
                    "¬©.*?CNRTL" // Copyright
                ]
                
                var closestEnd: String.Index = html.endIndex
                for endPattern in endPatterns {
                    if let endRange = html.range(of: endPattern, options: [.regularExpression, .caseInsensitive], range: searchRange) {
                        if endRange.lowerBound < closestEnd {
                            closestEnd = endRange.lowerBound
                        }
                    }
                }
                
                var etymologyText = String(html[start.lowerBound..<closestEnd])
                    .replacingOccurrences(of: "<[^>]+>", with: " ", options: .regularExpression) // Remplacer par espace
                    .replacingOccurrences(of: "\\*\\*", with: "", options: .regularExpression) // Enlever les balises gras markdown
                    .replacingOccurrences(of: "\\s+", with: " ", options: .regularExpression)
                    .trimmingCharacters(in: .whitespacesAndNewlines)
                
                // Ne plus supprimer les r√©f√©rences - laisser Claude faire le tri
                etymologyText = etymologyText
                    .replacingOccurrences(of: "\\s+", with: " ", options: .regularExpression)
                    .trimmingCharacters(in: .whitespacesAndNewlines)
                
                if etymologyText.count >= 50 {
                    print("‚úÖ √âtymologie extraite directement (\(etymologyText.count) caract√®res)")
                    print("üìù Aper√ßu: \(String(etymologyText.prefix(150)))...")
                    return etymologyText
                }
            }
        }
        
        // Si aucun pattern ne fonctionne, essayer une extraction g√©n√©rale
        throw EtymologyError.analysisError("Impossible d'extraire l'√©tymologie de la page")
    }
} 